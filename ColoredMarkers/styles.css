h1{
    text-align: center;
}
.marker{
    height: 25px;
    width: 200px;
    margin: 10px auto;
}
.cap{
    width: 60px;
    height: 25px;
}

/* The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel: rgba(redValue, greenValue, blueValue, alphaValue); */
.sleeve {
    width: 110px;
    height: 25px;
    background-color:rgba(255,255,255,50%);
    border-left: 10px double rgba(0,0,0,75%);
    /* opacity: 0.5; */
}
.sleeve, .cap{
    display: inline-block;
}

.red {
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
    box-shadow: -5px -5px red;
}

.green {
    background: linear-gradient(#55680D, #71F53E, #116C31);
    box-shadow:5px 5px 5px green
}

.blue{
    /* background:rgb(127, 0, 255); */
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
}

.container{
    background-color:rgb(255,255,255);
    padding:10px 0;
}





/* 

ADDING BOX SHADOW SYNTAX:

box-shadow: offsetX offsetY color;

But what if you wanted to position your shadow on the opposite side? You can do that by using negative values for offsetX and offsetY.

BLUERADIUS
Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property:

    ADDING BOX RADIUS SYNTAX
box-shadow: offsetX offsetY blurRadius color;

If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher the value of blurRadius, the greater the blurring effect is.

SPREADRADIUS
But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:


    ADDING SPREAD_RADIUS SYNTAX

box-shadow: offsetX offsetY blurRadius spreadRadius color;

Like blurRadius, spreadRadius defaults to 0 if it isn't included.*/



/*
INFORMATION ON HSL MODEL

The HSL color model, or hue, saturation, and lightness, is another way to represent colors.

The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, 
a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.

If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, 
and blue is at 240 degrees.

Saturation is the intensity of a color from 0%, or gray, to 100% for pure color.

Lightness is how bright a color appears, from 0%, or complete black, to 100%, 
complete white, with 50% being neutral.

*/

/*
UTILIZING HEX COLORS

You may already be familiar with decimal, or base 10 values, which go from 0 - 9. 
Hexadecimal, or base 16 values, go from 0 - 9, then A - F:

0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
With hex colors, 00 is 0% of that color, and FF is 100%. 
So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).

Lower the intensity of green by setting green value of the hex color to 7F. */


/* 
LINEAR GRADIENT
The LINEAR_GRADIENT function is very flexible -- here is the basic 
    syntax you'll use in this tutorial:

        linear-gradient(gradientDirection, color1, color2, ...);

    gradientDirection is the direction of the line used for the transition. 
    color1 and color2 are color arguments, which are the colors that will be used in the transition itself.
    These can be any type of color, including color keywords, hex, rgb, or hsl.
 */

/*
UTLIZING COLOR STOP

COLOR-STOPS allow you to fine-tune where colors are placed along the gradient line. They are a length unit like px or percentages that follow a color in the linear-gradient function.

For example, in this red-black gradient, the transition from red to black takes place at the 90% point along the gradient line, so red takes up most of the available space:

linear-gradient(90deg, red 90%, black); */

